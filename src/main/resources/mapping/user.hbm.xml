<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<!--
    <hibernate-mapping>一般不去配置，采用默认即可。
    schema:指定映射数据库的schema(模式/数据库)，如果指定该属性，则表名会自动添加该schema前缀
    package:指定包前缀 指定持久化类所在的包名 这样之后calss子元素中就不必使用全限定性的类名
    default-cascade="none"：默认的级联风格，表与表联动。
    default-lazy="true"：默认延迟加载
 -->
<hibernate-mapping>
    <!--
        <class>：使用class元素定义一个持久化类。
        name="cn.javass.user.vo.UserModel"：持久化类的java全限定名；
        table="tbl_user"：对应数据库表名，默认持久化类名作为表名；
        proxy:指定一个接口，在延迟装载时作为代理使用，也可在这里指定该类自己的名字。
        mutable="true"：默认为true，设置为false时则不可以被应用程序更新或删除，等价于所有<property>元素的update属性为false，表示整个实例不能被更新。
        dynamic-insert="false"：默认为false，动态修改那些有改变过的字段，而不用修改所有字段；
        dynamic-update="false"：默认为false，动态插入非空值字段；
        select-before-update="false"：默认为false，在修改之前先做一次查询，与用户的值进行对比，有变化都会真正更新；
        optimistic-lock="version"：默认为version(检查version/timestamp字段)，取值：all(检查全部字段)、dirty(只检查修改过的字段)；
                                   none(不使用乐观锁定)，此参数主要用来处理并发，每条值都有固定且唯一的版本，版本为最新时才能执行操作；
        如果需要采用继承映射，则class元素下还会增加<subclass.../>元素等用于定义子类。

        如果连接的是 oracle数据库，则建表时不能使用 User，因为它是 oracle的关键字。所以需要另外指定一个表名。
        如果一定要使用 user为表名，可以在表名上加上反引号，即波浪线下的那个符号（在 1 前面），但这样在以后的查询中可能会出异常。
        所以最好还是修改表名。
     -->
    <class name="com.hyman.entity.User" table="user" >

        <!-- 使用 hibernate 的二级缓存，第三方的缓存技术 ehcache 实现 -->
        <cache usage="read-write" />

        <!--
            <id>：定义了该属性到数据库表主键字段的映射。
            type  指定该标识属性的数据类型，该类型可以是Hibernate的内建类型，也可以是java类型，如果是java类型则需要使用全限
                  定类名（带包名）。该属性可选，如果没有指定类型， 则hibernate自行判断该标识属性数据类型。通常建议设定。
            name="userId"：标识属性的名字；
            column="userId"：表主键字段的名字，如果不填写与name一样；
            unsaved-value=""：指定还没有被保存的值（即让 hibernate 去保存这个值），-1，0，any，none，null，undefined。
         -->
        <id name="userId" column="id" type="java.lang.Integer">
            <!--
            <generator>：指定主键由什么生成，推荐使用 uuid，assigned指用户手工填入。设定标识符生成器适应代理主键的有：

             hibernate 中主键生成策略的区别：
                identity:
                由底层数据库生成标识符，是由数据库自己生成的，这个主键必须设置为自增长，前提条件是低层数据库支持自动增长字段类型。（DB2,MYSQL）

                increment:
                Hibernat 自动以递增的方式生成标识符，每次增量1。该主键必须为Integer类型。这种方式可能产生的问题是：不能在集群下使用。

                native：
                由 Hibernate根据使用的数据库自行判断采用 identity、hilo、sequence 其中一种作为主键生成方式。它是 hibernate默认的配置，
                泛指自增，也就是说除了 Oracle数据库外（oracle下用 native需要用到一个叫 hibernate_sequence的 sequence），大部分数据库
                你都可以使用默认的 native来代表自增。
                并且如果不指定字段名及类型的话，默认是按照 javabean 属性对应的名字及类型来自动生成。

                uuid.hex：由 Hibernate基于128位的 UUID算法生成 16进制数值（编码后以长度 32的字符串表示）作为主键。

                uuid.string：与 uuid.hex类似，只是生成的主键未进行编码（长度16），不能应用在 PostgreSQL 数据库中。

                foreign：使用另外一个相关联的对象的标识符作为主键。

                assigned：主键由外部程序负责生成，在 save() 之前指定一个。即不能把 setId（）方法设置成private类型。
                hilo：通过 hi/lo算法实现的主键生成机制，需要额外的数据库表或字段提供高位值来源。

                seqhilo：与 hilo类似，通过 hi/lo算法实现的主键生成机制，需要数据库中的Sequence，适用于支持 Sequence的数据库，如Oracle。
            -->
            <generator class="increment"/>
        </id>

        <!--
            <version/>：使用版本控制来处理并发，要开启optimistic-lock="version"和dynamic-update="true"。
            name="version"：持久化类的属性名，column="version"：指定持有版本号的字段名；
         -->
        <!--<version name="version" column="version"/>-->

        <!--
            <property>：为类定义一个持久化的javaBean风格的属性。
            name="name"：标识属性的名字，以小写字母开头；
            column="name"：表主键字段的名字，如果不填写与name一样；
            update="true"/insert="true"：默认为true，表示可以被更新或插入；
            access="property/field"：指定Hibernate访问持久化类属性的方式。默认property。property表示使用setter/getter方式。field表示运用java反射机制直接访问类的属性。
            formula="{select。。。。。}"：该属性指定一个SLQ表达式，指定该属性的值将根据表达式类计算，计算属性没有和它对应的数据列。
            formula属性允许包含表达式：sum,average,max函数求值的结果。
            例如：formula="(select avg(p.price) from Product P)"
            unique="true" not-null="true"
         -->
        <property name="name" column="name" />
        <property name="password" column="password"/>

        <!--
        但是 hibernate 在多对多的操作和性能方面都不太理想，实现很麻烦。所以它的多对多映射使用较少。实际使用中最好转换为一对多的对
        象模型，hibernate 会自动创建中间关联表，形成两个一对多的关系。
        set 对应得表即为中间表，查询时是按照 user_id 查到本实例，然后再多对多查询 Role 实例，使用外键 role_id。
        -->
        <set name="roles" table="user_roles">
            <key column="user_id"/>
            <many-to-many class="com.hyman.entity.Role" column="role_id"/>
        </set>

    </class>
</hibernate-mapping>