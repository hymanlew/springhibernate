<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<!--
    <hibernate-mapping>一般不去配置，采用默认即可。
    schema:指定映射数据库的schema(模式/数据库)，如果指定该属性，则表名会自动添加该schema前缀
    package:指定包前缀 指定持久化类所在的包名 这样之后calss子元素中就不必使用全限定性的类名
    default-cascade="none"：默认的级联风格，表与表联动。
    default-lazy="true"：默认延迟加载
 -->
<hibernate-mapping>
    <!--
        <class>：使用class元素定义一个持久化类。
        name="cn.javass.user.vo.UserModel"：持久化类的java全限定名；
        table="tbl_user"：对应数据库表名，默认持久化类名作为表名；
        proxy:指定一个接口，在延迟装载时作为代理使用，也可在这里指定该类自己的名字。
        mutable="true"：默认为true，设置为false时则不可以被应用程序更新或删除，等价于所有<property>元素的update属性为false，表示整个实例不能被更新。
        dynamic-insert="false"：默认为false，动态修改那些有改变过的字段，而不用修改所有字段；
        dynamic-update="false"：默认为false，动态插入非空值字段；
        select-before-update="false"：默认为false，在修改之前先做一次查询，与用户的值进行对比，有变化都会真正更新；
        optimistic-lock="version"：默认为version(检查version/timestamp字段)，取值：all(检查全部字段)、dirty(只检查修改过的字段)；
                                   none(不使用乐观锁定)，此参数主要用来处理并发，每条值都有固定且唯一的版本，版本为最新时才能执行操作；
        如果需要采用继承映射，则class元素下还会增加<subclass.../>元素等用于定义子类。

        如果连接的是 oracle数据库，则建表时不能使用 User，因为它是 oracle的关键字。所以需要另外指定一个表名。
        如果一定要使用 user为表名，可以在表名上加上反引号，即波浪线下的那个符号（在 1 前面），但这样在以后的查询中可能会出异常。
        所以最好还是修改表名。
     -->
    <class name="com.hyman.entity.User" table="user" >

        <!--
            <id>：定义了该属性到数据库表主键字段的映射。
            type  指定该标识属性的数据类型，该类型可以是Hibernate的内建类型，也可以是java类型，如果是java类型则需要使用全限
                  定类名（带包名）。该属性可选，如果没有指定类型， 则hibernate自行判断该标识属性数据类型。通常建议设定。
            name="userId"：标识属性的名字；
            column="userId"：表主键字段的名字，如果不填写与name一样；
            unsaved-value=""：指定还没有被保存的值（即让 hibernate 去保存这个值），-1，0，any，none，null，undefined。
         -->
        <id name="userId" column="id" type="java.lang.Integer">
            <!-- <generator>：指定主键由什么生成，推荐使用 uuid，assigned指用户手工填入。设定标识符生成器适应代理主键的有：
                increment：有Hibernat自动以递增的方式生成标识符，每次增量1；
                identity：由底层数据库生成标识符，前提条件是底层数据库支持自动增长字段类型。（DB2,MYSQL）
                uuid:用128位的UUID算法生成字符串类型标识符。

            适应自然主键：
                assigned:由java程序负责生成标识符，为了能让java应用程序设置OID,不能把setId（）方法设置成private类型。
                让应用程序在save()之前为对象分配一个标识符。相当于不指定<generator.../>元素时所采用的默认策略。
                应当尽量避免自然主键

                hibernate 连接 mysql 时，javabean 对应的表结构，主键的生成策略：
                native：int 类型（bean 中为 int），且是自增长的。
                并且如果不指定字段名及类型的话，默认是按照 javabean 属性对应的名字及类型来自动生成。
            -->
            <generator class="increment"/>
        </id>

        <!--
            <version/>：使用版本控制来处理并发，要开启optimistic-lock="version"和dynamic-update="true"。
            name="version"：持久化类的属性名，column="version"：指定持有版本号的字段名；
         -->
        <!--<version name="version" column="version"/>-->

        <!--
            <property>：为类定义一个持久化的javaBean风格的属性。
            name="name"：标识属性的名字，以小写字母开头；
            column="name"：表主键字段的名字，如果不填写与name一样；
            update="true"/insert="true"：默认为true，表示可以被更新或插入；
            access="property/field"：指定Hibernate访问持久化类属性的方式。默认property。property表示使用setter/getter方式。field表示运用java反射机制直接访问类的属性。
            formula="{select。。。。。}"：该属性指定一个SLQ表达式，指定该属性的值将根据表达式类计算，计算属性没有和它对应的数据列。
            formula属性允许包含表达式：sum,average,max函数求值的结果。
            例如：formula="(select avg(p.price) from Product P)"
            unique="true" not-null="true"
         -->
        <property name="name" column="name" />
        <property name="password" column="password"/>

        <!--
            组件映射：把多个属性打包在一起当一个属性使用，用来把类的粒度变小。
            <component name="属性，这里指对象">
                 <property name="name1"></property>
                 <property name="name2"></property>
             </component>
         -->

        <!-- 外键,对应得表为中间表,对应键为c_id -->
        <!--
            <set name="teacherSet" table="classes_teacher" >
                <key>
                    <column name="c_id"/>
                </key>
                 多对多对应Teacher POJO类,该类对应中间表的t_id
                <many-to-many class="Teacher" column="t_id"/>
            </set>
        -->

        <!--
            <join>:一个对象映射多个表，该元素必须放在所有<property>之后。
            <join table="tbl_test：子表名">
                <key column="uuid：子表主键"></key>
            <property name="name1：对象属性" column="name：子表字段"></property>
        </join>
         -->

        <!--
            many-to-one 代表多对一（即本表数据的外键值可能是一个），反之代表一对多。
            fetch 属性有两个取值 join（left join 在本例中为 left join student）和select，默认select。

            select 方式是发送了两条语句，先查找了Card的其他部分，然后根据Card表关联的外键列值到Student表里面去查找对应的
            Student的信息。

            hibernate 对于多对多级联查询，即两张表 a，b，加一张中间表 ab，从 a 查询 所有的 b 时，就会很麻烦。
            而 mybatis 就可以直接级联查询 collections。如果是两张表关联的话，则可以 one-to-many，many-to-one
        -->
        <!--<many-to-one column="STUDENT_ID" name="student" class="entity.Student" fetch="join" lazy="false">
        </many-to-one>-->
    </class>
</hibernate-mapping>